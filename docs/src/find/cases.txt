? Usually `find` takes a path where to look, the rest is optional
> src tests
OK
Options { paths: ["src", "tests"], exec: None, user: None, perm: None }

? In addition to paths `find` can take some more options, typically unusual: username, note a
? single dash with a long name:
> -user bob
OK
Options { paths: [], exec: None, user: Some("bob"), perm: None }

? Permissions, in an unusual format:
> -mode /x
OK
Options { paths: [], exec: None, user: None, perm: Some(Any(Perms { read: false, write: false, exec: true })) }

? And the most interesting one is `-exec` which takes multiple arbitrary parameters terminated
? by `;` (in shell you have to escape it as `\\;`)
> -exec cat -A '{}' \;
OK
Options { paths: [], exec: Some(["cat", "-A", "{}"]), user: None, perm: None }

? As usuall you can mix them and order doesn't matter
> src -mode -r -user bob -exec rustc '{}' \;
OK
Options { paths: ["src"], exec: Some(["rustc", "{}"]), user: Some("bob"), perm: Some(All(Perms { read: true, write: false, exec: false })) }

? While `bpaf` takes some effort to render the help even for custom stuff - you can always
? bypass it by hiding options and substituting your own with custom `header`/`footer`.
> --help
Stdout
Usage: [-exec] [<USER>] [-mode] [<PATH>]...

Available positional items:
    -exec  -exec /path/to/command flags and options ;
    -mode  -mode (perm | -perm | /perm)

Available options:
    -h, --help  Prints help information
